#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
brooklyn.catalog:
  items:
  - "https://raw.githubusercontent.com/brooklyncentral/common-catalog-utils/master/common-tests/src/main/resources/commontests/common.tests.bom"
  - id: rabbitmq-broker-tests
    version: 1.0
    itemType: template
    iconUrl: https://github.com/brooklyncentral/brooklyn-rabbitmq-broker/raw/master/rabbitmq.png
    name: RabbitMQ Broker tests
    description: Test that RabbitMQ is running and can run minimal examples
    license_code: Apache-2.0
    license_url: http://www.apache.org/licenses/LICENSE-2.0.txt
    item:
      services:
      - type: brooklyn-rabbitmq-broker
        id: rabbitmq
        # increased as was failing timeout on restart
        brooklyn.config:
          start.timeout: 5m
      - type: test-case
        name: RabbitMQ Broker tests
        brooklyn.config:
          timeout: 1h
          targetId: rabbitmq
        brooklyn.children:
        - type: assert-up-and-running-initial
          name: "1. Node up and running"
        - type: assert-restart-process
          name: "2. restart process"
          brooklyn.config:
            process.grep.name: "[Rr]abbitmq"
        - type: assert-stop-and-restart-process
          name: "3. stop and restart process"
          brooklyn.config:
            process.grep.name: "[Rr]abbitmq"
        - type: test-case
          name: "4. RabbitMQ Example Tests"
          brooklyn.children:       
          # Run a hello world tutorial
          - type: org.apache.brooklyn.test.framework.SimpleShellCommandTest
            name: "4.1 Check the RabbitMQ hello world tutorial runs ok"
            command: |
              if [[ ! -z $(which yum) ]]; then
                sudo yum -y install python-pip
              elif [[ ! -z $(which apt-get) ]]; then
                sudo apt-get install -y python-pip
              else
                echo "error can't install package $PACKAGE"
                exit 1;
              fi
              sudo pip install pika
              # send and recieve python files
              cat > ~/send.py <<- EOM
              #!/usr/bin/env python
              import pika
              connection = pika.BlockingConnection(pika.ConnectionParameters(
                      host='localhost'))
              channel = connection.channel()
              channel.queue_declare(queue='hello')
              channel.basic_publish(exchange='',
                                    routing_key='hello',
                                    body='Hello World!')
              print(" [x] Sent 'Hello World!'")
              connection.close()
              EOM
              cat > ~/recieve.py <<- EOM
              #!/usr/bin/env python
              import pika
              connection = pika.BlockingConnection(pika.ConnectionParameters(
                      host='localhost'))
              channel = connection.channel()
              channel.queue_declare(queue='hello')
              def callback(ch, method, properties, body):
                  f = open('out.txt', 'w')
                  f.write(" [x] Received %r" % body)
                  f.close()
                  print(' [*] Writing message to out.txt')
              channel.basic_consume('hello', callback, auto_ack=False)
              print(' [*] Waiting for messages. To exit press CTRL+C')
              channel.start_consuming()
              EOM
              # start the server script in the background
              python recieve.py &
              # send in the foreground
              python send.py
              sleep 1
              cat out.txt
            assertStatus:
              equals: 0
            assertOut:
              contains: Received 'Hello World!'
