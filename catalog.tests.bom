#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
brooklyn.catalog:
  items:
  - id: rabbitmq-broker-tests
    version: 1.0
    itemType: template
    iconUrl: https://github.com/brooklyncentral/brooklyn-rabbitmq-broker/raw/master/rabbitmq.png
    name: RabbitMQ Broker tests
    description: Test that RabbitMQ is running and can run minimal examples
    license_code: Apache-2.0
    license_url: http://www.apache.org/licenses/LICENSE-2.0.txt
    item:
      services:
      - type: brooklyn-rabbitmq-broker
        id: rabbitmq
        # increased as was failing timeout on restart
        brooklyn.config:
          start.timeout: 5m
      - type: org.apache.brooklyn.test.framework.TestCase
        brooklyn.config:
          timeout: 1h
          targetId: rabbitmq
        name: RabbitMQ Broker tests
        brooklyn.children:
        - type: org.apache.brooklyn.test.framework.TestCase
          name: "Initial Tests"
          brooklyn.children:
          # Is up and can deploy
          - type: org.apache.brooklyn.test.framework.TestSensor
            name: TEST [service.state] IS [running]
            sensor: service.state
            assert:
            - matches: running
        
        - type: org.apache.brooklyn.test.framework.TestCase
          name: "Effector Restart, Stop & Restart Tests"
          brooklyn.children:      
          # Effector: restart Tests
          - type: org.apache.brooklyn.test.framework.TestEffector
            name: Invoke restart Effector
            effector: restart
            params:
              restartMachine: false
          - type: org.apache.brooklyn.test.framework.TestSensor
            name: Check RabbitMQ is up after restart
            sensor: service.isUp
            assert:
            - equals: true
          - type: org.apache.brooklyn.test.framework.SimpleShellCommandTest
            name: Check RabbitMQ process has restarted
            command: ps -ef | grep [r]abbitmq
            assertStatus:
              equals: 0
          # Effector: stop + restart Tests
          - type: org.apache.brooklyn.test.framework.TestEffector
            name: Invoke stop Effector
            effector: stop
            params:
              stopMachineMode: NEVER
          - type: org.apache.brooklyn.test.framework.TestSensor
            name: Check RabbitMQ is not up after stop
            sensor: service.isUp
            assert:
            - equals: false
          - type: org.apache.brooklyn.test.framework.SimpleShellCommandTest
            name: Check RabbitMQ process has stopped
            command: ps -ef | grep [r]abbitmq
            assertStatus:
              equals: 1
          - type: org.apache.brooklyn.test.framework.TestEffector
            name: Invoke restart Effector
            effector: restart
            params:
              restartMachine: false
          - type: org.apache.brooklyn.test.framework.TestSensor
            name: Check RabbitMQ is up after restart
            sensor: service.isUp
            assert:
            - equals: true
          - type: org.apache.brooklyn.test.framework.SimpleShellCommandTest
            name: Check RabbitMQ process has restarted
            command: ps -ef | grep [r]abbitmq
            assertStatus:
              equals: 0
        
        - type: org.apache.brooklyn.test.framework.TestCase
          name: "Example Tests"
          brooklyn.children:       
          # Run a hello world tutorial
          - type: org.apache.brooklyn.test.framework.SimpleShellCommandTest
            name: Check the RabbitMQ hello world tutorial runs ok
            command: |
              if [[ ! -z $(which yum) ]]; then
                sudo yum -y install python-pip
              elif [[ ! -z $(which apt-get) ]]; then
                sudo apt-get install -y python-pip
              else
                echo "error can't install package $PACKAGE"
                exit 1;
              fi
              sudo pip install pika
              # send and recieve python files
              cat > ~/send.py <<- EOM
              #!/usr/bin/env python
              import pika
              connection = pika.BlockingConnection(pika.ConnectionParameters(
                      host='localhost'))
              channel = connection.channel()
              channel.queue_declare(queue='hello')
              channel.basic_publish(exchange='',
                                    routing_key='hello',
                                    body='Hello World!')
              print(" [x] Sent 'Hello World!'")
              connection.close()
              EOM
              cat > ~/recieve.py <<- EOM
              #!/usr/bin/env python
              import pika
              connection = pika.BlockingConnection(pika.ConnectionParameters(
                      host='localhost'))
              channel = connection.channel()
              channel.queue_declare(queue='hello')
              def callback(ch, method, properties, body):
                  f = open('out.txt', 'w')
                  f.write(" [x] Received %r" % body)
                  f.close()
                  print(' [*] Writing message to out.txt')
              channel.basic_consume(callback,
                                    queue='hello',
                                    no_ack=True)
              print(' [*] Waiting for messages. To exit press CTRL+C')
              channel.start_consuming()
              EOM
              # start the server script in the background
              python recieve.py &
              # send in the foreground
              python send.py
              sleep 1
              cat out.txt
            assertStatus:
              equals: 0
            assertOut:
              contains: Received 'Hello World!'
